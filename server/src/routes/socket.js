const { Server } = require('socket.io');
const { MessagesModel } = require('../model/index.js');

function connectSocket(server) {
    const io = new Server(server, {
        cors: {
            origin: '*',
            credentials: true,
        },
    });

    // Áî®Êà∑ ID Âà∞ socket ID ÁöÑÊò†Â∞ÑÔºå‰ª•‰æøÊ†πÊçÆÁî®Êà∑ ID ÂèëÈÄÅÊ∂àÊÅØ
    const userSockets = {};

    io.on('connection', (socket) => {
        console.log('üîó A user connected');

        // Áî®Êà∑Âä†ÂÖ•Êó∂ÂèëÈÄÅ‰ªñ‰ª¨ÁöÑ ID Âíå socket ID Âà∞ÊúçÂä°Á´Ø
        socket.on('join', ({ userId }) => {
            userSockets[userId] = socket.id;
            console.log(`üì¢ User ${userId} connected with socket ID ${socket.id}`);
        });

        // ÁõëÂê¨Êù•Ëá™ÂÆ¢Êà∑Á´ØÁöÑÊ∂àÊÅØ
        socket.on('postMessage', async (messageConfig) => {
            await updateDataBase(messageConfig);
            const { receiverId } = messageConfig ?? {};
            // ÂèëÈÄÅÊ∂àÊÅØÁªôÁâπÂÆöÁöÑÁî®Êà∑
            if (userSockets[receiverId]) {
                io.to(userSockets[receiverId]).emit('message', messageConfig);
            } else {
                console.error('‚ùå User not found');
            }
        });

        // Êñ≠ÂºÄËøûÊé•Êó∂Ê∏ÖÁêÜ
        socket.on('disconnect', () => {
            Object.keys(userSockets).forEach((userId) => {
                if (userSockets[userId] === socket.id) {
                    delete userSockets[userId];
                }
            });
        });
    });
}

async function updateDataBase(messageConfig) {
    const { senderId, receiverId, text, conversationId, timestamp } = messageConfig ?? {};
    // ‰∏çÂ≠òÂú®ÔºåÊñ∞Â¢û document
    const data = await MessagesModel.findOne({ conversationId });
    if (!data) {
        const newData = new MessagesModel({
            conversationId,
            messages: [
                {
                    senderId,
                    receiverId,
                    text,
                    timestamp,
                },
            ],
        });
        await newData.save();
        return;
    }
    // Â≠òÂú®ÔºåÊõ¥Êñ∞ document
    const dataToUpdate = {
        senderId,
        receiverId,
        text,
        timestamp,
    };
    await MessagesModel.findOneAndUpdate({ conversationId }, { $push: { messages: dataToUpdate } }, { new: true });
}

module.exports = connectSocket;
